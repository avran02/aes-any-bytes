package internal_test

import (
	"fmt"
	"testing"

	"github.com/avran02/aes-any-bytes/internal"

	"github.com/stretchr/testify/assert"
)

func TestRemovePadding(t *testing.T) {
	for _, test := range tests {
		lastBlock := test.paddedBlock[len(test.paddedBlock)-1]
		t.Run("last byte: "+fmt.Sprint(lastBlock[len(lastBlock)-1]), func(t *testing.T) {
			assert := assert.New(t)
			ActualUnpaddedBlocks := internal.RemovePadding(test.paddedBlock)
			assert.Equal(test.excepted, ActualUnpaddedBlocks)
		})
	}

}

var tests = []struct {
	paddedBlock [][]byte
	excepted    [][]byte
}{
	{
		paddedBlock: [][]byte{{
			0x05, 0x40, 0x23, 0x12,
			0x1d, 0x1e, 0x13, 0x11,
			0x10, 0x23, 0x53, 0x05,
			0x05, 0x05, 0x05, 0x05,
		}},
		excepted: [][]byte{{
			0x05, 0x40, 0x23, 0x12,
			0x1d, 0x1e, 0x13, 0x11,
			0x10, 0x23, 0x53,
		}},
	},
	{
		paddedBlock: [][]byte{{
			0x05, 0x40, 0x23, 0x12,
			0x1d, 0x1e, 0x13, 0x11,
			0x10, 0x23, 0x05, 0x05,
			0x05, 0x05, 0x05, 0x05,
		}},
		excepted: [][]byte{{
			0x05, 0x40, 0x23, 0x12,
			0x1d, 0x1e, 0x13, 0x11,
			0x10, 0x23, 0x05,
		}},
	},
	{
		paddedBlock: [][]byte{{
			0x00, 0x11, 0x22, 0x33,
			0x44, 0x55, 0x66, 0x77,
			0x88, 0x99, 0xaa, 0xbb,
			0xcc, 0xdd, 0xee, 0xff,
		}, {
			0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0x10,
			0x10, 0x10, 0x10, 0x10,
		},
		},
		excepted: [][]byte{{
			0x00, 0x11, 0x22, 0x33,
			0x44, 0x55, 0x66, 0x77,
			0x88, 0x99, 0xaa, 0xbb,
			0xcc, 0xdd, 0xee, 0xff,
		}, {}},
	},
	{
		paddedBlock: [][]byte{{
			0x01, 0x02, 0x03, 0x04,
			0x05, 0x06, 0x07, 0x08,
			0x09, 0x0a, 0x0b, 0x0c,
			0x03, 0x03, 0x03, 0x03,
		}},
		excepted: [][]byte{{
			0x01, 0x02, 0x03, 0x04,
			0x05, 0x06, 0x07, 0x08,
			0x09, 0x0a, 0x0b, 0x0c,
			0x03,
		}},
	},
}
